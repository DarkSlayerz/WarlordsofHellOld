package server.clip;import server.clip.region.Region;
public class LineOfSightPathFinder {
	public Path findPath(int curX, int curY, int desX, int desY, int z) {
		if(curX == desX && curY == desY) {
			return null;
		}
		Path p = new Path();
		while(curX != desX || curY != desY) {
			int beforeX = curX;
			int beforeY = curY;
			if(curX > desX) {				if(Region.getTile(curX, curY, z).isWesternTraversalPermitted()						&& Region.getTile(curX - 1, curY, z).isEasternTraversalPermitted()) {					curX -= 1;				}			} else if(curX < desX) {				if(Region.getTile(curX, curY, z).isEasternTraversalPermitted()						&& Region.getTile(curX + 1, curY, z).isWesternTraversalPermitted()) {					curX += 1;				}							}			if(curY > desY) {				if(Region.getTile(curX, curY, z).isSouthernTraversalPermitted()						&& Region.getTile(curX, curY - 1, z).isNorthernTraversalPermitted()) {					curY -= 1;				}			} else if(curY < desY) {				if(Region.getTile(curX, curY, z).isNorthernTraversalPermitted()						&& Region.getTile(curX, curY + 1, z).isSouthernTraversalPermitted()) {					curY += 1;				}							}						if(curX != beforeX && curY != beforeY) {//diagonal				if(curX > beforeX && curY > beforeY) {//north east					if(!Region.getTile(beforeX, beforeY, z).isNorthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY, z).isEasternTraversalPermitted()							|| !Region.getTile(beforeX + 1, beforeY, z).isWesternTraversalPermitted()							|| !Region.getTile(beforeX + 1, beforeY, z).isNorthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY + 1, z).isSouthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY + 1, z).isEasternTraversalPermitted()) {						curX = beforeX;						curY = beforeY;					}				}								if(curX > beforeX && curY < beforeY) {//south east					if(!Region.getTile(beforeX, beforeY, z).isSouthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY, z).isEasternTraversalPermitted()							|| !Region.getTile(beforeX + 1, beforeY, z).isWesternTraversalPermitted()							|| !Region.getTile(beforeX + 1, beforeY, z).isSouthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY - 1, z).isNorthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY - 1, z).isEasternTraversalPermitted()) {						curX = beforeX;						curY = beforeY;					}				}								if(curX < beforeX && curY > beforeY) {//north west					if(!Region.getTile(beforeX, beforeY, z).isNorthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY, z).isWesternTraversalPermitted()							|| !Region.getTile(beforeX - 1, beforeY, z).isEasternTraversalPermitted()							|| !Region.getTile(beforeX - 1, beforeY, z).isNorthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY + 1, z).isSouthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY + 1, z).isWesternTraversalPermitted()) {						curX = beforeX;						curY = beforeY;					}				}								if(curX < beforeX && curY < beforeY) {//south west					if(!Region.getTile(beforeX, beforeY, z).isSouthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY, z).isWesternTraversalPermitted()							|| !Region.getTile(beforeX - 1, beforeY, z).isEasternTraversalPermitted()							|| !Region.getTile(beforeX - 1, beforeY, z).isSouthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY - 1, z).isNorthernTraversalPermitted()							|| !Region.getTile(beforeX, beforeY - 1, z).isWesternTraversalPermitted()) {						curX = beforeX;						curY = beforeY;					}				}			}						p.addPoint(new Point(curX, curY));			if(curX == beforeX && curY == beforeY) {				break;			}			if(curX == desX && curY == desY) {				break;			}		}		return p;	}}
